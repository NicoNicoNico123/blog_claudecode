{
  "name": "YouTube to Blog Pipeline with AI Agents",
  "nodes": [
    {
      "parameters": {},
      "id": "1",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [{
            "field": "cronExpression",
            "expression": "0 9 * * *"
          }]
        }
      },
      "id": "2",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [250, 450]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "channelId",
              "value": "UC0lbAQVpenvfA2QqzsRtL_g"
            }
          ]
        },
        "options": {}
      },
      "id": "3",
      "name": "Set Channel Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "getAll",
        "part": ["snippet"],
        "filters": {
          "id": "={{ $json[\"channelId\"] }}"
        },
        "options": {}
      },
      "id": "4",
      "name": "Get YouTube Channel",
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "resource": "playlistItem",
        "operation": "getAll",
        "playlistId": "UC0lbAQVpenvfA2QqzsRtL_g",
        "limit": 1,
        "options": {}
      },
      "id": "5",
      "name": "Get Latest Video",
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM video_transcripts WHERE video_id = $1",
        "options": {
          "queryReplacement": "={{ $json[\"video_id\"] }}"
        }
      },
      "id": "6",
      "name": "Check if Transcript Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "text": "Extract the transcript from the YouTube video with ID: {{ $json[\"video_id\"] }}",
        "options": {
          "systemMessage": "You are a YouTube transcript extractor. Your task is to extract the transcript from a YouTube video and return it in a structured format."
        }
      },
      "id": "7",
      "name": "Extract Transcript Agent",
      "type": "nodes-langchain.agent",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "video_transcripts",
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": null
        },
        "options": {}
      },
      "id": "8",
      "name": "Store Transcript",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM video_transcripts WHERE created_at >= NOW() - INTERVAL '1 hour' ORDER BY created_at DESC LIMIT 1",
        "options": {}
      },
      "id": "9",
      "name": "Get Latest Transcript",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "transcriptText",
              "value": "={{ $json[\"rows\"][0][\"transcript_text\"] }}"
            },
            {
              "name": "videoTitle",
              "value": "={{ $json[\"rows\"][0][\"title\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "10",
      "name": "Set Transcript Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "text": "Generate a financial blog post in Traditional Chinese based on this transcript: {{ $json[\"transcriptText\"] }}. The title is: {{ $json[\"videoTitle\"] }}. Structure the blog post with these sections: 1. Hook, 2. Market Impact, 3. Beginner Explanation, 4. Key Takeaways.",
        "options": {
          "systemMessage": "You are a financial content writer specializing in Traditional Chinese content. Your task is to create engaging blog posts from financial video transcripts."
        }
      },
      "id": "11",
      "name": "Blog Generator Agent",
      "type": "nodes-langchain.agent",
      "typeVersion": 1,
      "position": [2050, 300]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "blogContent",
              "value": "={{ $json[\"output\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "12",
      "name": "Set Blog Content",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "text": "Analyze this financial blog content and identify key topics that need visual representation: {{ $json[\"blogContent\"] }}",
        "options": {
          "systemMessage": "You are an image context analyzer. Your task is to identify key financial concepts in blog content that would benefit from visual representation."
        }
      },
      "id": "13",
      "name": "Image Context Analyzer Agent",
      "type": "nodes-langchain.agent",
      "typeVersion": 1,
      "position": [2450, 300]
    },
    {
      "parameters": {
        "text": "Generate image prompts for these contexts: {{ $json[\"output\"] }}",
        "options": {
          "systemMessage": "You are an image prompt generator. Your task is to create appropriate prompts for generating or searching financial images."
        }
      },
      "id": "14",
      "name": "Image Prompt Generator Agent",
      "type": "nodes-langchain.agent",
      "typeVersion": 1,
      "position": [2650, 300]
    },
    {
      "parameters": {
        "prompt": "={{ $json[\"output\"] }}",
        "responseFormat": "imageUrl",
        "options": {
          "n": 1,
          "size": "1024x1024"
        }
      },
      "id": "15",
      "name": "Generate Images with DALL-E",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [2850, 200]
    },
    {
      "parameters": {
        "query": "={{ $json[\"output\"] }}",
        "per_page": 1,
        "order_by": "relevant"
      },
      "id": "16",
      "name": "Search Images on Unsplash",
      "type": "mcp__douglarek/unsplash-mcp-server__search_photos",
      "typeVersion": 1,
      "position": [2850, 400]
    },
    {
      "parameters": {
        "file": "={{ $json[\"data\"][0][\"url\"] }}",
        "resource_type": "image"
      },
      "id": "17",
      "name": "Upload Generated Image to Cloudinary",
      "type": "mcp__cloudinary-mcp-server__upload",
      "typeVersion": 1,
      "position": [3050, 150]
    },
    {
      "parameters": {
        "file": "={{ $json[\"results\"][0][\"urls\"][\"regular\"] }}",
        "resource_type": "image"
      },
      "id": "18",
      "name": "Upload Searched Image to Cloudinary",
      "type": "mcp__cloudinary-mcp-server__upload",
      "typeVersion": 1,
      "position": [3050, 450]
    },
    {
      "parameters": {
        "combine": "all"
      },
      "id": "22",
      "name": "Collect Cloudinary URLs",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [3250, 150]
    },
    {
      "parameters": {
        "text": "Format this blog content with the Cloudinary image URLs: {{ $json[\"blogContent\"] }}. Use the Cloudinary URLs from previous steps.",
        "options": {
          "systemMessage": "You are a content formatter. Your task is to format blog content with image URLs for publishing. The Cloudinary URLs are available in the input data."
        }
      },
      "id": "19",
      "name": "Content Formatter Agent",
      "type": "nodes-langchain.agent",
      "typeVersion": 1,
      "position": [3450, 300]
    },
    {
      "parameters": {
        "source": "adminApi",
        "resource": "post",
        "operation": "create",
        "title": "={{ $json[\"videoTitle\"] }}",
        "content": "={{ $json[\"output\"] }}",
        "additionalFields": {
          "status": "published"
        }
      },
      "id": "20",
      "name": "Publish to Ghost",
      "type": "n8n-nodes-base.ghost",
      "typeVersion": 1,
      "position": [3650, 300]
    },
    {
      "parameters": {
        "operation": "pg_execute_sql",
        "sql": "INSERT INTO pipeline_logs (workflow_name, status, timestamp) VALUES ('YouTube to Blog Pipeline with AI Agents', 'completed', NOW());"
      },
      "id": "21",
      "name": "Log Completion",
      "type": "mcp__postgresql-mcp-server__pg_execute_sql",
      "typeVersion": 1,
      "position": [3850, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [[{
        "node": "Set Channel Info",
        "type": "main",
        "index": 0
      }]]
    },
    "Cron Trigger": {
      "main": [[{
        "node": "Set Channel Info",
        "type": "main",
        "index": 0
      }]]
    },
    "Set Channel Info": {
      "main": [[{
        "node": "Get YouTube Channel",
        "type": "main",
        "index": 0
      }]]
    },
    "Get YouTube Channel": {
      "main": [[{
        "node": "Get Latest Video",
        "type": "main",
        "index": 0
      }]]
    },
    "Get Latest Video": {
      "main": [[{
        "node": "Check if Transcript Exists",
        "type": "main",
        "index": 0
      }]]
    },
    "Check if Transcript Exists": {
      "main": [[{
        "node": "Extract Transcript Agent",
        "type": "main",
        "index": 0
      }]]
    },
    "Extract Transcript Agent": {
      "main": [[{
        "node": "Store Transcript",
        "type": "main",
        "index": 0
      }]]
    },
    "Store Transcript": {
      "main": [[{
        "node": "Get Latest Transcript",
        "type": "main",
        "index": 0
      }]]
    },
    "Get Latest Transcript": {
      "main": [[{
        "node": "Set Transcript Data",
        "type": "main",
        "index": 0
      }]]
    },
    "Set Transcript Data": {
      "main": [[{
        "node": "Blog Generator Agent",
        "type": "main",
        "index": 0
      }]]
    },
    "Blog Generator Agent": {
      "main": [[{
        "node": "Set Blog Content",
        "type": "main",
        "index": 0
      }]]
    },
    "Set Blog Content": {
      "main": [[{
        "node": "Image Context Analyzer Agent",
        "type": "main",
        "index": 0
      }]]
    },
    "Image Context Analyzer Agent": {
      "main": [[{
        "node": "Image Prompt Generator Agent",
        "type": "main",
        "index": 0
      }]]
    },
    "Image Prompt Generator Agent": {
      "main": [
        [{
          "node": "Generate Images with DALL-E",
          "type": "main",
          "index": 0
        }],
        [{
          "node": "Search Images on Unsplash",
          "type": "main",
          "index": 0
        }]
      ]
    },
    "Generate Images with DALL-E": {
      "main": [[{
        "node": "Upload Generated Image to Cloudinary",
        "type": "main",
        "index": 0
      }]]
    },
    "Search Images on Unsplash": {
      "main": [[{
        "node": "Upload Searched Image to Cloudinary",
        "type": "main",
        "index": 0
      }]]
    },
    "Upload Generated Image to Cloudinary": {
      "main": [[{
        "node": "Collect Cloudinary URLs",
        "type": "main",
        "index": 0
      }]]
    },
    "Upload Searched Image to Cloudinary": {
      "main": [[{
        "node": "Collect Cloudinary URLs",
        "type": "main",
        "index": 0
      }]]
    },
    "Collect Cloudinary URLs": {
      "main": [[{
        "node": "Content Formatter Agent",
        "type": "main",
        "index": 0
      }]]
    },
    "Content Formatter Agent": {
      "main": [[{
        "node": "Publish to Ghost",
        "type": "main",
        "index": 0
      }]]
    },
    "Publish to Ghost": {
      "main": [[{
        "node": "Log Completion",
        "type": "main",
        "index": 0
      }]]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  }
}